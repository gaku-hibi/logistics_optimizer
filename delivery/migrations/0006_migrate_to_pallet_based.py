# Generated by Django 5.1.0 on 2024-07-11 11:55

from django.db import migrations
from django.db.models import F, Q


def migrate_to_pallet_based(apps, schema_editor):
    """既存データをパレットベースの構造に移行"""
    
    # モデルを取得
    PalletDetail = apps.get_model('delivery', 'PalletDetail')
    PalletItem = apps.get_model('delivery', 'PalletItem')
    LooseItem = apps.get_model('delivery', 'LooseItem')
    UnifiedPallet = apps.get_model('delivery', 'UnifiedPallet')
    LoadPallet = apps.get_model('delivery', 'LoadPallet')
    PalletLoadHistory = apps.get_model('delivery', 'PalletLoadHistory')
    DeliveryPlan = apps.get_model('delivery', 'DeliveryPlan')
    PlanItemLoad = apps.get_model('delivery', 'PlanItemLoad')
    PalletConfiguration = apps.get_model('delivery', 'PalletConfiguration')
    
    # 1. 既存のパレット詳細からREALパレットを作成
    print("REALパレットの作成を開始...")
    
    # デフォルトパレット設定を取得
    try:
        default_config = PalletConfiguration.objects.get(is_default=True)
        pallet_width = default_config.width
        pallet_depth = default_config.depth
    except PalletConfiguration.DoesNotExist:
        pallet_width = 100
        pallet_depth = 100
    
    for pallet_detail in PalletDetail.objects.all():
        # パレット内の商品から出荷依頼を特定
        pallet_items = PalletItem.objects.filter(pallet=pallet_detail)
        if not pallet_items.exists():
            continue
            
        # 最初の商品の出荷依頼を使用
        first_item = pallet_items.first()
        shipping_order = first_item.shipping_order
        
        # パレットの高さを計算（商品の最大Z座標＋高さ）
        max_height = 0
        for item in pallet_items:
            item_top = item.position_z + item.height
            if item_top > max_height:
                max_height = item_top
        
        # UnifiedPalletを作成
        unified_pallet = UnifiedPallet.objects.create(
            pallet_type='REAL',
            delivery_date=pallet_detail.palletize_plan.delivery_date,
            width=pallet_width,
            depth=pallet_depth,
            height=max_height,
            weight=pallet_detail.total_weight,
            volume=pallet_detail.total_volume,
            shipping_order=shipping_order,
            pallet_detail=pallet_detail
        )
        print(f"REALパレット作成: {unified_pallet.id} - {pallet_detail.id}")
    
    # 2. 既存のバラ積み商品からVIRTUALパレットを作成
    print("VIRTUALパレットの作成を開始...")
    
    for loose_item in LooseItem.objects.all():
        unified_pallet = UnifiedPallet.objects.create(
            pallet_type='VIRTUAL',
            delivery_date=loose_item.palletize_plan.delivery_date,
            width=loose_item.width,
            depth=loose_item.depth,
            height=loose_item.height,
            weight=loose_item.weight,
            volume=loose_item.width * loose_item.depth * loose_item.height,
            shipping_order=loose_item.shipping_order,
            item=loose_item.item,
            item_quantity=1
        )
        print(f"VIRTUALパレット作成: {unified_pallet.id} - {loose_item.item.item_code}")
    
    # 3. 既存のPlanItemLoadからLoadPalletを作成
    print("LoadPalletの作成を開始...")
    
    for plan in DeliveryPlan.objects.all():
        load_sequence = 1
        
        # 配送計画ごとのitem_loadを処理
        for item_load in PlanItemLoad.objects.filter(plan=plan):
            # 対応するUnifiedPalletを検索
            
            # まずREALパレットを検索（パレット内の商品として）
            real_pallet_found = False
            for unified_pallet in UnifiedPallet.objects.filter(
                pallet_type='REAL',
                shipping_order=item_load.shipping_order
            ):
                if unified_pallet.pallet_detail:
                    # このパレットに該当する商品が含まれているかチェック
                    pallet_items = PalletItem.objects.filter(
                        pallet=unified_pallet.pallet_detail,
                        item=item_load.item,
                        shipping_order=item_load.shipping_order
                    )
                    if pallet_items.exists():
                        # LoadPalletを作成または更新
                        load_pallet, created = LoadPallet.objects.get_or_create(
                            plan=plan,
                            pallet=unified_pallet,
                            defaults={
                                'position_x': item_load.position_x,
                                'position_y': item_load.position_y,
                                'rotation': item_load.rotation,
                                'load_sequence': load_sequence
                            }
                        )
                        
                        # PalletLoadHistoryを作成
                        PalletLoadHistory.objects.get_or_create(
                            pallet=unified_pallet,
                            plan=plan,
                            defaults={'status': 'USED'}
                        )
                        
                        real_pallet_found = True
                        print(f"LoadPallet作成 (REAL): {load_pallet.id} - プラン{plan.id}")
                        break
            
            # REALパレットが見つからない場合、VIRTUALパレットを検索
            if not real_pallet_found:
                virtual_pallets = UnifiedPallet.objects.filter(
                    pallet_type='VIRTUAL',
                    item=item_load.item,
                    shipping_order=item_load.shipping_order
                )
                
                if virtual_pallets.exists():
                    virtual_pallet = virtual_pallets.first()
                    
                    # LoadPalletを作成
                    load_pallet, created = LoadPallet.objects.get_or_create(
                        plan=plan,
                        pallet=virtual_pallet,
                        defaults={
                            'position_x': item_load.position_x,
                            'position_y': item_load.position_y,
                            'rotation': item_load.rotation,
                            'load_sequence': load_sequence
                        }
                    )
                    
                    # PalletLoadHistoryを作成
                    PalletLoadHistory.objects.get_or_create(
                        pallet=virtual_pallet,
                        plan=plan,
                        defaults={'status': 'USED'}
                    )
                    
                    print(f"LoadPallet作成 (VIRTUAL): {load_pallet.id} - プラン{plan.id}")
            
            load_sequence += 1
    
    print("データ移行完了")


def reverse_migrate_to_pallet_based(apps, schema_editor):
    """パレットベースの構造から既存データ構造に戻す"""
    
    # 新しいテーブルのデータを削除
    UnifiedPallet = apps.get_model('delivery', 'UnifiedPallet')
    LoadPallet = apps.get_model('delivery', 'LoadPallet')
    PalletLoadHistory = apps.get_model('delivery', 'PalletLoadHistory')
    
    PalletLoadHistory.objects.all().delete()
    LoadPallet.objects.all().delete()
    UnifiedPallet.objects.all().delete()
    
    print("パレットベースデータの削除完了")


class Migration(migrations.Migration):

    dependencies = [
        ('delivery', '0005_add_pallet_based_models'),
    ]

    operations = [
        migrations.RunPython(migrate_to_pallet_based, reverse_migrate_to_pallet_based),
    ]